{"version":3,"sources":["../src/index.js"],"names":["w","a","b","Array","isArray","undefined","valid","input","seed","options","cwd","process","loadConfig","file","loaded","base","filepath","dirname","config","opts","extends","rules","formatter","parserPreset","resolvedParserPreset","name","path","parserOpts","require","extended","prefix","preset","loadParserOpts","silent","plugins","length","forEach","pluginKey","env","DEBUG","Promise","all","map","key","item","value","entry","executedValue","reduce","registry","executed","configPath","explorer","explicitPath","resolve","explore","load","search","searchPath","local","parserName","pendingParser","parser","then","result","_"],"mappings":"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","file":"index.js","sourcesContent":["import path from 'path';\nimport executeRule from '@commitlint/execute-rule';\nimport resolveExtends from '@commitlint/resolve-extends';\nimport cosmiconfig from 'cosmiconfig';\nimport {toPairs, merge, mergeWith, pick, startsWith} from 'lodash';\nimport resolveFrom from 'resolve-from';\nimport loadPlugin from './utils/loadPlugin';\n\nconst w = (a, b) => (Array.isArray(b) ? b : undefined);\nconst valid = input =>\n\tpick(\n\t\tinput,\n\t\t'extends',\n\t\t'rules',\n\t\t'plugins',\n\t\t'parserPreset',\n\t\t'formatter',\n\t\t'ignores',\n\t\t'defaultIgnores'\n\t);\n\nexport default async (seed = {}, options = {cwd: process.cwd()}) => {\n\tconst loaded = await loadConfig(options.cwd, options.file);\n\tconst base = loaded.filepath ? path.dirname(loaded.filepath) : options.cwd;\n\n\t// Merge passed config with file based options\n\tconst config = valid(merge({}, loaded.config, seed));\n\tconst opts = merge(\n\t\t{extends: [], rules: {}, formatter: '@commitlint/format'},\n\t\tpick(config, 'extends', 'plugins', 'ignores', 'defaultIgnores')\n\t);\n\n\t// Resolve parserPreset key when overwritten by main config\n\tif (typeof config.parserPreset === 'string') {\n\t\tconst resolvedParserPreset = resolveFrom(base, config.parserPreset);\n\n\t\tconfig.parserPreset = {\n\t\t\tname: config.parserPreset,\n\t\t\tpath: resolvedParserPreset,\n\t\t\tparserOpts: require(resolvedParserPreset)\n\t\t};\n\t}\n\n\t// Resolve extends key\n\tconst extended = resolveExtends(opts, {\n\t\tprefix: 'commitlint-config',\n\t\tcwd: base,\n\t\tparserPreset: config.parserPreset\n\t});\n\n\tconst preset = valid(mergeWith(extended, config, w));\n\n\t// Resolve parser-opts from preset\n\tif (typeof preset.parserPreset === 'object') {\n\t\tpreset.parserPreset.parserOpts = await loadParserOpts(\n\t\t\tpreset.parserPreset.name,\n\t\t\tpreset.parserPreset\n\t\t);\n\t}\n\n\t// Resolve config-relative formatter module\n\tif (typeof config.formatter === 'string') {\n\t\tpreset.formatter =\n\t\t\tresolveFrom.silent(base, config.formatter) || config.formatter;\n\t}\n\n\t// resolve plugins\n\tpreset.plugins = {};\n\tif (config.plugins && config.plugins.length) {\n\t\tconfig.plugins.forEach(pluginKey => {\n\t\t\tloadPlugin(preset.plugins, pluginKey, process.env.DEBUG === 'true');\n\t\t});\n\t}\n\n\t// Execute rule config functions if needed\n\tconst executed = await Promise.all(\n\t\t['rules']\n\t\t\t.map(key => {\n\t\t\t\treturn [key, preset[key]];\n\t\t\t})\n\t\t\t.map(async item => {\n\t\t\t\tconst [key, value] = item;\n\t\t\t\tconst executedValue = await Promise.all(\n\t\t\t\t\ttoPairs(value || {}).map(entry => executeRule(entry))\n\t\t\t\t);\n\t\t\t\treturn [\n\t\t\t\t\tkey,\n\t\t\t\t\texecutedValue.reduce((registry, item) => {\n\t\t\t\t\t\tconst [key, value] = item;\n\t\t\t\t\t\tregistry[key] = value;\n\t\t\t\t\t\treturn registry;\n\t\t\t\t\t}, {})\n\t\t\t\t];\n\t\t\t})\n\t);\n\n\t// Merge executed config keys into preset\n\treturn executed.reduce((registry, item) => {\n\t\tconst [key, value] = item;\n\t\tregistry[key] = value;\n\t\treturn registry;\n\t}, preset);\n};\n\nasync function loadConfig(cwd, configPath) {\n\tconst explorer = cosmiconfig('commitlint');\n\n\tconst explicitPath = configPath ? path.resolve(cwd, configPath) : undefined;\n\tconst explore = explicitPath ? explorer.load : explorer.search;\n\tconst searchPath = explicitPath ? explicitPath : cwd;\n\tconst local = await explore(searchPath);\n\n\tif (local) {\n\t\treturn local;\n\t}\n\n\treturn {};\n}\n\nasync function loadParserOpts(parserName, pendingParser) {\n\t// Await for the module, loaded with require\n\tconst parser = await pendingParser;\n\n\t// Await parser opts if applicable\n\tif (\n\t\ttypeof parser === 'object' &&\n\t\ttypeof parser.parserOpts === 'object' &&\n\t\ttypeof parser.parserOpts.then === 'function'\n\t) {\n\t\treturn (await parser.parserOpts).parserOpts;\n\t}\n\n\t// Create parser opts from factory\n\tif (\n\t\ttypeof parser === 'object' &&\n\t\ttypeof parser.parserOpts === 'function' &&\n\t\tstartsWith(parserName, 'conventional-changelog-')\n\t) {\n\t\treturn await new Promise(resolve => {\n\t\t\tconst result = parser.parserOpts((_, opts) => {\n\t\t\t\tresolve(opts.parserOpts);\n\t\t\t});\n\n\t\t\t// If result has data or a promise, the parser doesn't support factory-init\n\t\t\t// due to https://github.com/nodejs/promises-debugging/issues/16 it just quits, so let's use this fallback\n\t\t\tif (result) {\n\t\t\t\tPromise.resolve(result).then(opts => {\n\t\t\t\t\tresolve(opts.parserOpts);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\t// Pull nested paserOpts, might happen if overwritten with a module in main config\n\tif (\n\t\ttypeof parser === 'object' &&\n\t\ttypeof parser.parserOpts === 'object' &&\n\t\ttypeof parser.parserOpts.parserOpts === 'object'\n\t) {\n\t\treturn parser.parserOpts.parserOpts;\n\t}\n\n\treturn parser.parserOpts;\n}\n"]}