{"version":3,"sources":["../src/index.test.js"],"names":["proxyquire","require","noCallThru","noPreserveCache","t","bootstrap","cwd","actual","deepEqual","rules","foo","is","file","join","process","plugin","scopedPlugin","stubbedLoad","plugins","example","parserPreset","name","parserOpts","headerPattern","throws","extends","formatter","one","two","zero","baz","outer","init","child","inner","configPath","before","JSON","stringify","arbitraryField","after","resolve"],"mappings":";;AAAA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;;;AAEA,MAAMA,aAAaC,QAAQ,YAAR,EACjBC,UADiB,GAEjBC,eAFiB,EAAnB;;AAIA,mBAAK,oCAAL,EAAiDC,CAAN;AAAA;AAC9B,wBAAM,UAAIC,SAAJ,CAAc,wBAAd,CAAN;AAAA;AAANC,MAAM;AACG,0BAAM,gBAAK,EAAL,EAAS,EAACA,GAAD,EAAT,CAAN;AAAA;AAATC,WAAS;;AACfH,OAAEI,SAAF,CAAYD,OAAOE,KAAnB,EAA0B,EAA1B;AADe;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;AAAA;AAAA;AAD8B,aAA3C;;AAMA,mBAAK,yBAAL,EAAsCL,CAAN;AAAA;AACnB,wBAAM,UAAIC,SAAJ,CAAc,wBAAd,CAAN;AAAA;AAANC,MAAM;AACG,0BAAM,gBAAK,EAACG,OAAO,EAACC,KAAK,KAAN,EAAR,EAAL,EAA4B,EAACJ,GAAD,EAA5B,CAAN;AAAA;AAATC,WAAS;;AACfH,OAAEO,EAAF,CAAKJ,OAAOE,KAAP,CAAaC,GAAlB,EAAuB,KAAvB;AADe;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;AAAA;AAAA;AADmB,aAAhC;;AAMA,mBAAK,kDAAL,EAA+DN,CAAN;AAAA;AAClDQ,KADkD,GAC3C,6BAD2C;AAE5C,wBAAM,UAAIP,SAAJ,CAAc,8BAAd,CAAN;AAAA;AAANC,MAAM;AACG,0BAAM,gBAAK,EAAL,EAAS,EAACA,GAAD,EAAMM,IAAN,EAAT,CAAN;AAAA;AAATL,WAAS;;AACfH,OAAEO,EAAF,CAAKJ,OAAOE,KAAP,CAAaC,GAAlB,EAAuB,KAAvB;AADe;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;AAAA;AAAA;AAF4C,aAAzD;;AAOA,mBAAK,kDAAL,EAA+DN,CAAN;AAAA;AAC5C,wBAAM,UAAIC,SAAJ,CAAc,8BAAd,CAAN;AAAA;AAANC,MAAM;AACNM,OADM,GACC,eAAKC,IAAL,CAAUP,GAAV,EAAe,6BAAf,CADD;AAEG,0BAAM,gBAAK,EAAL,EAAS,EAACA,KAAKQ,QAAQR,GAAR,EAAN,EAAqBM,IAArB,EAAT,CAAN;AAAA;AAATL,WAAS;;AACfH,OAAEO,EAAF,CAAKJ,OAAOE,KAAP,CAAaC,GAAlB,EAAuB,KAAvB;AADe;AAAA;AAAA;AAAA;AAAA;AAFH;AAAA;AAAA;AAAA;AAD4C,aAAzD;;AAOA,mBAAK,oCAAL,EAAiDN,CAAN;AAAA;AACpCW,OADoC,GAC3B,EAAC,WAAW,IAAZ,EAD2B;AAEpCC,aAFoC,GAErB,EAAC,WAAW,IAAZ,EAFqB;AAGpCC,YAHoC,GAGtBjB,WAAW,GAAX,EAAgB;AACnC,+BAA6Be,MADM;AAEnC,sCAAoCC;AAFD,EAAhB,CAHsB;AAQ9B,wBAAM,UAAIX,SAAJ,CAAc,wBAAd,CAAN;AAAA;AAANC,MAAM;AACG,0BAAMW,YACpB,EAACC,SAAS,CAAC,SAAD,EAAY,gBAAZ,CAAV,EADoB,EAEpB,EAACZ,GAAD,EAFoB,CAAN;AAAA;AAATC,WAAS;;AAIfH,OAAEI,SAAF,CAAYD,OAAOW,OAAnB,EAA4B;AAC3BC,eAASJ,MADkB;AAE3B,wBAAkBC;AAFS,MAA5B;AAJe;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;AAAA;AAAA;AAR8B,aAA3C;;AAmBA,mBAAK,sCAAL,EAAmDZ,CAAN;AAAA;AACtCW,OADsC,GAC7B,EAAC,WAAW,IAAZ,EAD6B;AAEtCC,aAFsC,GAEvB,EAAC,WAAW,IAAZ,EAFuB;AAGtCC,YAHsC,GAGxBjB,WAAW,GAAX,EAAgB;AACnC,+BAA6Be,MADM;AAEnC,sCAAoCC;AAFD,EAAhB,CAHwB;AAQhC,wBAAM,UAAIX,SAAJ,CAAc,0BAAd,CAAN;AAAA;AAANC,MAAM;AACG,0BAAMW,YAAY,EAAZ,EAAgB,EAACX,GAAD,EAAhB,CAAN;AAAA;AAATC,WAAS;;AACfH,OAAEI,SAAF,CAAYD,OAAOW,OAAnB,EAA4B;AAC3BC,eAASJ,MADkB;AAE3B,wBAAkBC;AAFS,MAA5B;AADe;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;AAAA;AAAA;AARgC,aAA7C;;AAgBA,mBAAK,6BAAL,EAA0CZ,CAAN;AAAA;;AACvB,wBAAM,UAAIC,SAAJ,CAAc,wBAAd,CAAN;AAAA;AAANC,MAAM;AACmB,0BAAM,gBACpC;AACCc,kBAAc;AADf,IADoC,EAIpC,EAACd,GAAD,EAJoC,CAAN;AAAA;AAAA;AAAVC,WAAU,QAAxBa,YAAwB;;AAM/BhB,OAAEO,EAAF,CAAKJ,OAAOc,IAAZ,EAAkB,iCAAlB;AACAjB,OAAEI,SAAF,CAAYD,OAAOe,UAAnB,EAA+B;AAC9BC,qBAAe;AADe,MAA/B;AAP+B;AAAA;AAAA;AAAA;AAAA;AADnB;AAAA;AAAA;AAAA;AADuB,aAApC;;AAcA,mBAAK,6BAAL,EAA0CnB,CAAN;AAAA;AACvB,wBAAM,UAAIC,SAAJ,CAAc,0BAAd,CAAN;AAAA;AAANC,MAAM;AACZ,0BAAMF,EAAEoB,MAAF,CAAS,gBAAK,EAAL,EAAS,EAAClB,GAAD,EAAT,CAAT,CAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADY;AAAA;AAAA;AAAA;AADuB,aAApC;;AAKA,mBAAK,iCAAL,EAA8CF,CAAN;AAAA;AAC3B,wBAAM,UAAIC,SAAJ,CAAc,4BAAd,CAAN;AAAA;AAANC,MAAM;AACG,0BAAM,gBAAK,EAAL,EAAS,EAACA,GAAD,EAAT,CAAN;AAAA;AAATC,WAAS;;AACfH,OAAEI,SAAF,CAAYD,OAAOE,KAAnB,EAA0B,EAA1B;AADe;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;AAAA;AAAA;AAD2B,aAAxC;;AAMA,mBAAK,kCAAL,EAA+CL,CAAN;AAAA;AAC5B,wBAAM,UAAIC,SAAJ,CAAc,qBAAd,CAAN;AAAA;AAANC,MAAM;AACG,0BAAM,gBAAK,EAAL,EAAS,EAACA,GAAD,EAAT,CAAN;AAAA;AAATC,WAAS;;AACfH,OAAEI,SAAF,CAAYD,OAAOkB,OAAnB,EAA4B,EAA5B;AADe;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;AAAA;AAAA;AAD4B,aAAzC;;AAMA,mBAAK,qBAAL,EAAkCrB,CAAN;AAAA;AACf,wBAAM,UAAIC,SAAJ,CAAc,2CAAd,CAAN;AAAA;AAANC,MAAM;AACG,0BAAM,gBAAK,EAAL,EAAS,EAACA,GAAD,EAAT,CAAN;AAAA;AAATC,WAAS;;AACfH,OAAEI,SAAF,CAAYD,MAAZ,EAAoB;AACnBmB,iBAAW,oBADQ;AAEnBD,eAAS,CAAC,mBAAD,CAFU;AAGnBP,eAAS,EAHU;AAInBT,aAAO;AACNkB,YAAK,CADC;AAENC,YAAK;AAFC;AAJY,MAApB;AADe;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;AAAA;AAAA;AADe,aAA5B;;AAcA,mBAAK,mBAAL,EAAgCxB,CAAN;AAAA;AACb,wBAAM,UAAIC,SAAJ,CAAc,4BAAd,CAAN;AAAA;AAANC,MAAM;AACG,0BAAM,gBAAK,EAAL,EAAS,EAACA,GAAD,EAAT,CAAN;AAAA;AAATC,WAAS;;AACfH,OAAEI,SAAF,CAAYD,MAAZ,EAAoB;AACnBmB,iBAAW,oBADQ;AAEnBD,eAAS,CAAC,kBAAD,CAFU;AAGnBP,eAAS,EAHU;AAInBT,aAAO;AACNoB,aAAM,CADA;AAENF,YAAK,CAFC;AAGNC,YAAK;AAHC;AAJY,MAApB;AADe;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;AAAA;AAAA;AADa,aAA1B;;AAeA,mBAAK,kCAAL,EAA+CxB,CAAN;AAAA;AAC5B,wBAAM,UAAIC,SAAJ,CAAc,iCAAd,CAAN;AAAA;AAANC,MAAM;AACG,0BAAM,gBAAK,EAAL,EAAS,EAACA,GAAD,EAAT,CAAN;AAAA;AAATC,WAAS;;;AAEfH,OAAEI,SAAF,CAAYD,MAAZ,EAAoB;AACnBmB,iBAAW,oBADQ;AAEnBD,eAAS,CAAC,kBAAD,CAFU;AAGnBP,eAAS,EAHU;AAInBT,aAAO;AACNoB,aAAM,CADA;AAENF,YAAK,CAFC;AAGNC,YAAK;AAHC;AAJY,MAApB;AAFe;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;AAAA;AAAA;AAD4B,aAAzC;;AAgBA,mBAAK,kCAAL,EAA+CxB,CAAN;AAAA;AAC5B,wBAAM,UAAIC,SAAJ,CAAc,iCAAd,CAAN;AAAA;AAANC,MAAM;AACG,0BAAM,gBAAK,EAAL,EAAS,EAACA,GAAD,EAAT,CAAN;AAAA;AAATC,WAAS;;;AAEfH,OAAEI,SAAF,CAAYD,MAAZ,EAAoB;AACnBmB,iBAAW,oBADQ;AAEnBD,eAAS,CAAC,kBAAD,CAFU;AAGnBP,eAAS,EAHU;AAInBT,aAAO;AACNoB,aAAM,CADA;AAENF,YAAK,CAFC;AAGNC,YAAK;AAHC;AAJY,MAApB;AAFe;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;AAAA;AAAA;AAD4B,aAAzC;;AAgBA,mBAAK,gCAAL,EAA6CxB,CAAN;AAAA;AAC1B,wBAAM,UAAIC,SAAJ,CAAc,+BAAd,CAAN;AAAA;AAANC,MAAM;AACG,0BAAM,gBAAK,EAAL,EAAS,EAACA,GAAD,EAAT,CAAN;AAAA;AAATC,WAAS;;;AAEfH,OAAEI,SAAF,CAAYD,MAAZ,EAAoB;AACnBmB,iBAAW,oBADQ;AAEnBD,eAAS,CAAC,kBAAD,CAFU;AAGnBP,eAAS,EAHU;AAInBT,aAAO;AACNoB,aAAM,CADA;AAENF,YAAK,CAFC;AAGNC,YAAK;AAHC;AAJY,MAApB;AAFe;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;AAAA;AAAA;AAD0B,aAAvC;;AAgBA,mBAAK,0CAAL,EAAuDxB,CAAN;AAAA;AACpC,wBAAM,UAAIC,SAAJ,CAAc,oCAAd,CAAN;AAAA;AAANC,MAAM;AACG,0BAAM,gBAAK,EAAL,EAAS,EAACA,GAAD,EAAT,CAAN;AAAA;AAATC,WAAS;;;AAEfH,OAAEI,SAAF,CAAYD,MAAZ,EAAoB;AACnBmB,iBAAW,oBADQ;AAEnBD,eAAS,CAAC,kBAAD,CAFU;AAGnBP,eAAS,EAHU;AAInBT,aAAO;AACNoB,aAAM,CADA;AAENF,YAAK,CAFC;AAGNC,YAAK;AAHC;AAJY,MAApB;AAFe;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;AAAA;AAAA;AADoC,aAAjD;;AAgBA,mBAAK,wDAAL,EAAqExB,CAAN;AAAA;AAClD,wBAAM,UAAIC,SAAJ,CAAc,iCAAd,CAAN;AAAA;AAANC,MAAM;AACG,0BAAM,gBAAK,EAAL,EAAS,EAACA,GAAD,EAAT,CAAN;AAAA;AAATC,WAAS;;AACfH,OAAEO,EAAF,CAAKJ,OAAOa,YAAP,CAAoBC,IAAzB,EAA+B,UAA/B;AACAjB,OAAEI,SAAF,CAAYD,OAAOa,YAAP,CAAoBE,UAAhC,EAA4C;AAC3CC,qBAAe;AAD4B,MAA5C;AAFe;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;AAAA;AAAA;AADkD,aAA/D;;AASA,mBAAK,qCAAL,EAAkDnB,CAAN;AAAA;AAC/B,wBAAM,UAAIC,SAAJ,CAAc,kCAAd,CAAN;AAAA;AAANC,MAAM;AACG,0BAAM,gBAAK,EAAL,EAAS,EAACA,GAAD,EAAT,CAAN;AAAA;AAATC,WAAS;;AACfH,OAAEO,EAAF,CAAKJ,OAAOa,YAAP,CAAoBC,IAAzB,EAA+B,iCAA/B;AACAjB,OAAEO,EAAF,CAAK,OAAOJ,OAAOa,YAAP,CAAoBE,UAAhC,EAA4C,QAA5C;AACAlB,OAAEI,SAAF,CACCD,OAAOa,YAAP,CAAoBE,UAApB,CAA+BC,aADhC,EAEC,2BAFD;AAHe;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;AAAA;AAAA;AAD+B,aAA5C;;AAWA,mBAAK,qBAAL,EAAkCnB,CAAN;AAAA;AACf,wBAAM,UAAIC,SAAJ,CAAc,qBAAd,CAAN;AAAA;AAANC,MAAM;AACG,0BAAM,gBAAK,EAAL,EAAS,EAACA,GAAD,EAAT,CAAN;AAAA;AAATC,WAAS;;;AAEfH,OAAEI,SAAF,CAAYD,MAAZ,EAAoB;AACnBmB,iBAAW,oBADQ;AAEnBD,eAAS,EAFU;AAGnBP,eAAS,EAHU;AAInBT,aAAO;AACNC,YAAK,KADC;AAENoB,YAAK;AAFC;AAJY,MAApB;AAFe;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;AAAA;AAAA;AADe,aAA5B;;AAeA,mBAAK,iCAAL,EAA8C1B,CAAN;AAAA;AAC3B,wBAAM,UAAIC,SAAJ,CAAc,uBAAd,CAAN;AAAA;AAANC,MAAM;AACG,0BAAM,gBAAK,EAAL,EAAS,EAACA,GAAD,EAAT,CAAN;AAAA;AAATC,WAAS;;;AAEfH,OAAEI,SAAF,CAAYD,MAAZ,EAAoB;AACnBmB,iBAAW,oBADQ;AAEnBD,eAAS,CAAC,OAAD,CAFU;AAGnBP,eAAS,EAHU;AAInBT,aAAO;AACNoB,aAAM,CADA;AAENF,YAAK;AAFC;AAJY,MAApB;AAFe;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;AAAA;AAAA;AAD2B,aAAxC;;AAeA,mBAAK,wBAAL,EAAqCvB,CAAN;AAAA;AAChB,wBAAM,UAAIC,SAAJ,CAAc,sBAAd,CAAN;AAAA;AAAR0B,QAAQ;AACd,0BAAM,UAAIC,IAAJ,CAAS,eAAKnB,IAAL,CAAUkB,KAAV,EAAiB,aAAjB,CAAT,CAAN;AAAA;AACMzB,QADN,GACY,eAAKO,IAAL,CAAUkB,KAAV,EAAiB,aAAjB,EAAgC,aAAhC,CADZ;AAGe,4BAAM,gBAAK,EAAL,EAAS,EAACzB,GAAD,EAAT,CAAN;AAAA;AAATC,aAAS;;;AAEfH,SAAEI,SAAF,CAAYD,MAAZ,EAAoB;AACnBmB,mBAAW,oBADQ;AAEnBD,iBAAS,EAFU;AAGnBP,iBAAS,EAHU;AAInBT,eAAO;AACNwB,gBAAO,IADD;AAENC,gBAAO,KAFD;AAGNH,gBAAO;AAHD;AAJY,QAApB;AAFe;AAAA;AAAA;AAAA;AAAA;AAHf;AAAA;AAAA;AAAA;AADc;AAAA;AAAA;AAAA;AADgB,aAA/B;;AAmBA,mBAAK,8CAAL,EAA2D3B,CAAN;AAAA;AACtC,wBAAM,UAAIC,SAAJ,CAAc,sBAAd,CAAN;AAAA;AAAR0B,QAAQ;AACF,0BAAM,UAAIC,IAAJ,CAAS,eAAKnB,IAAL,CAAUkB,KAAV,EAAiB,aAAjB,CAAT,CAAN;AAAA;AAANzB,QAAM;AACG,4BAAM,gBAAK,EAAL,EAAS,EAACA,GAAD,EAAT,CAAN;AAAA;AAATC,aAAS;;;AAEfH,SAAEI,SAAF,CAAYD,MAAZ,EAAoB;AACnBmB,mBAAW,oBADQ;AAEnBD,iBAAS,EAFU;AAGnBP,iBAAS,EAHU;AAInBT,eAAO;AACNwB,gBAAO,KADD;AAENC,gBAAO,KAFD;AAGNH,gBAAO;AAHD;AAJY,QAApB;AAFe;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;AAAA;AAAA;AADE;AAAA;AAAA;AAAA;AADsC,aAArD;;AAiBA,mBAAK,2BAAL,EAAwC3B,CAAN;AAAA;AACrB,wBAAM,UAAIC,SAAJ,CAAc,oBAAd,CAAN;AAAA;AAANC,MAAM;AACG,0BAAM,gBAAK,EAAL,EAAS,EAACA,GAAD,EAAT,CAAN;AAAA;AAATC,WAAS;;;AAEfH,OAAEI,SAAF,CAAYD,MAAZ,EAAoB;AACnBmB,iBAAW,kBADQ;AAEnBD,eAAS,EAFU;AAGnBP,eAAS,EAHU;AAInBT,aAAO;AAJY,MAApB;AAFe;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;AAAA;AAAA;AADqB,aAAlC;;AAYA,mBAAK,mDAAL,EAAgEL,CAAN;AAAA;AAC7C,wBAAM,UAAIC,SAAJ,CAAc,iCAAd,CAAN;AAAA;AAANC,MAAM;AACG,0BAAM,gBAAK,EAAL,EAAS,EAACA,GAAD,EAAT,CAAN;AAAA;AAATC,WAAS;;;AAEfH,OAAEI,SAAF,CAAYD,MAAZ,EAAoB;AACnBmB,iBAAW,2BAAYpB,GAAZ,EAAiB,wBAAjB,CADQ;AAEnBmB,eAAS,EAFU;AAGnBP,eAAS,EAHU;AAInBT,aAAO;AAJY,MAApB;AAFe;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;AAAA;AAAA;AAD6C,aAA1D;;AAYA,mBAAK,qEAAL,EAAkFL,CAAN;AAAA;AAC/D,wBAAM,UAAIC,SAAJ,CAAc,iCAAd,CAAN;AAAA;AAANC,MAAM;AACG,0BAAM,gBAAK,EAACoB,WAAW,oBAAZ,EAAL,EAAwC,EAACpB,GAAD,EAAxC,CAAN;AAAA;AAATC,WAAS;;;AAEfH,OAAEI,SAAF,CAAYD,MAAZ,EAAoB;AACnBmB,iBAAW,oBADQ;AAEnBD,eAAS,EAFU;AAGnBP,eAAS,EAHU;AAInBT,aAAO;AAJY,MAApB;AAFe;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;AAAA;AAAA;AAD+D,aAA5E;;AAYA,mBAAK,yCAAL,EAAsDL,CAAN;AAAA;AACzCQ,KADyC,GAClC,6BADkC;AAEnC,wBAAM,UAAIP,SAAJ,CAAc,8BAAd,CAAN;AAAA;AAANC,MAAM;AAEN6B,aAFM,GAEO,eAAKtB,IAAL,CAAUP,GAAV,EAAeM,IAAf,CAFP;AAGNwB,SAHM,GAGGC,KAAKC,SAAL,CAAerC,QAAQkC,UAAR,CAAf,CAHH;AAIZ,0BAAM,gBAAK,EAACI,gBAAgB,IAAjB,EAAL,EAA6B,EAACjC,GAAD,EAAMM,IAAN,EAA7B,CAAN;AAAA;AACM4B,UADN,GACcH,KAAKC,SAAL,CAAerC,QAAQkC,UAAR,CAAf,CADd;;;AAGA/B,OAAEO,EAAF,CAAKyB,MAAL,EAAaI,KAAb;AAHA;AAAA;AAAA;AAAA;AAAA;AAJY;AAAA;AAAA;AAAA;AAFmC,aAAhD;;AAYA,mBAAK,kDAAL,EAA+DpC,CAAN;AAAA;AAC5C,wBAAM,UAAIC,SAAJ,CAAc,4CAAd,CAAN;AAAA;AAANC,MAAM;AACG,0BAAM,gBAAK,EAAL,EAAS,EAACA,GAAD,EAAT,CAAN;AAAA;AAATC,WAAS;;;AAEfH,OAAEO,EAAF,CAAKJ,OAAOa,YAAP,CAAoBC,IAAzB,EAA+B,4CAA/B;AACAjB,OAAEO,EAAF,CAAK,OAAOJ,OAAOa,YAAP,CAAoBE,UAAhC,EAA4C,QAA5C;AACAlB,OAAEI,SAAF,CACCD,OAAOa,YAAP,CAAoBE,UAApB,CAA+BC,aADhC,EAEC,8BAFD;AAJe;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;AAAA;AAAA;AAD4C,aAAzD;;AAYA,mBAAK,kDAAL,EAA+DnB,CAAN;AAAA;AAC5C,wBAAM,UAAIC,SAAJ,CAAc,gCAAd,CAAN;AAAA;AAANC,MAAM;AACG,0BAAM,gBAAK,EAAL,EAAS,EAACA,GAAD,EAAT,CAAN;AAAA;AAATC,WAAS;;;AAEfH,OAAEO,EAAF,CAAKJ,OAAOa,YAAP,CAAoBC,IAAzB,EAA+B,gCAA/B;AACAjB,OAAEO,EAAF,CAAK,OAAOJ,OAAOa,YAAP,CAAoBE,UAAhC,EAA4C,QAA5C;AACAlB,OAAEI,SAAF,CACCD,OAAOa,YAAP,CAAoBE,UAApB,CAA+BC,aADhC,EAEC,4BAFD;AAJe;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;AAAA;AAAA;AAD4C,aAAzD;;AAYA,mBAAK,yDAAL,EAAsEnB,CAAN;AAAA;AACnD,wBAAM,UAAIC,SAAJ,CACjB,oDADiB,CAAN;AAAA;AAANC,MAAM;AAIZ,0BAAM,qBAAM,KAAN,EAAa,CAAC,SAAD,CAAb,EAA0B;AAC/BA,SAAK,eAAKmC,OAAL,CAAanC,GAAb,EAAkB,gBAAlB,EAAoC,iBAApC;AAD0B,IAA1B,CAAN;AAAA;AAIe,4BAAM,gBAAK,EAAL,EAAS,EAACA,GAAD,EAAT,CAAN;AAAA;AAATC,aAAS;;;AAEfH,SAAEO,EAAF,CAAKJ,OAAOa,YAAP,CAAoBC,IAAzB,EAA+B,6BAA/B;AACAjB,SAAEO,EAAF,CAAK,OAAOJ,OAAOa,YAAP,CAAoBE,UAAhC,EAA4C,QAA5C;AACAlB,SAAEI,SAAF,CAAYD,OAAOa,YAAP,CAAoBE,UAApB,CAA+BC,aAA3C,EAA0D,gBAA1D;AAJe;AAAA;AAAA;AAAA;AAAA;AAJf;AAAA;AAAA;AAAA;AAJY;AAAA;AAAA;AAAA;AADmD,aAAhE;;AAgBA,mBAAK,0EAAL,EAAuFnB,CAAN;AAAA;AACpE,wBAAM,UAAIC,SAAJ,CACjB,qDADiB,CAAN;AAAA;AAANC,MAAM;AAGG,0BAAM,gBAAK,EAAL,EAAS,EAACA,GAAD,EAAT,CAAN;AAAA;AAATC,WAAS;;;AAEfH,OAAEO,EAAF,CAAKJ,OAAOa,YAAP,CAAoBC,IAAzB,EAA+B,4CAA/B;AACAjB,OAAEO,EAAF,CAAK,OAAOJ,OAAOa,YAAP,CAAoBE,UAAhC,EAA4C,QAA5C;AACAlB,OAAEI,SAAF,CACCD,OAAOa,YAAP,CAAoBE,UAApB,CAA+BC,aADhC,EAEC,8BAFD;AAJe;AAAA;AAAA;AAAA;AAAA;AAHH;AAAA;AAAA;AAAA;AADoE,aAAjF","file":"index.test.js","sourcesContent":["import path from 'path';\nimport {fix, git, npm} from '@commitlint/test';\nimport test from 'ava';\nimport execa from 'execa';\nimport resolveFrom from 'resolve-from';\n\nimport load from '.';\n\nconst proxyquire = require('proxyquire')\n\t.noCallThru()\n\t.noPreserveCache();\n\ntest('extends-empty should have no rules', async t => {\n\tconst cwd = await git.bootstrap('fixtures/extends-empty');\n\tconst actual = await load({}, {cwd});\n\tt.deepEqual(actual.rules, {});\n});\n\ntest('uses seed as configured', async t => {\n\tconst cwd = await git.bootstrap('fixtures/extends-empty');\n\tconst actual = await load({rules: {foo: 'bar'}}, {cwd});\n\tt.is(actual.rules.foo, 'bar');\n});\n\ntest('rules should be loaded from relative config file', async t => {\n\tconst file = 'config/commitlint.config.js';\n\tconst cwd = await git.bootstrap('fixtures/specify-config-file');\n\tconst actual = await load({}, {cwd, file});\n\tt.is(actual.rules.foo, 'bar');\n});\n\ntest('rules should be loaded from absolute config file', async t => {\n\tconst cwd = await git.bootstrap('fixtures/specify-config-file');\n\tconst file = path.join(cwd, 'config/commitlint.config.js');\n\tconst actual = await load({}, {cwd: process.cwd(), file});\n\tt.is(actual.rules.foo, 'bar');\n});\n\ntest('plugins should be loaded from seed', async t => {\n\tconst plugin = {'@global': true};\n\tconst scopedPlugin = {'@global': true};\n\tconst stubbedLoad = proxyquire('.', {\n\t\t'commitlint-plugin-example': plugin,\n\t\t'@scope/commitlint-plugin-example': scopedPlugin\n\t});\n\n\tconst cwd = await git.bootstrap('fixtures/extends-empty');\n\tconst actual = await stubbedLoad(\n\t\t{plugins: ['example', '@scope/example']},\n\t\t{cwd}\n\t);\n\tt.deepEqual(actual.plugins, {\n\t\texample: plugin,\n\t\t'@scope/example': scopedPlugin\n\t});\n});\n\ntest('plugins should be loaded from config', async t => {\n\tconst plugin = {'@global': true};\n\tconst scopedPlugin = {'@global': true};\n\tconst stubbedLoad = proxyquire('.', {\n\t\t'commitlint-plugin-example': plugin,\n\t\t'@scope/commitlint-plugin-example': scopedPlugin\n\t});\n\n\tconst cwd = await git.bootstrap('fixtures/extends-plugins');\n\tconst actual = await stubbedLoad({}, {cwd});\n\tt.deepEqual(actual.plugins, {\n\t\texample: plugin,\n\t\t'@scope/example': scopedPlugin\n\t});\n});\n\ntest('uses seed with parserPreset', async t => {\n\tconst cwd = await git.bootstrap('fixtures/parser-preset');\n\tconst {parserPreset: actual} = await load(\n\t\t{\n\t\t\tparserPreset: './conventional-changelog-custom'\n\t\t},\n\t\t{cwd}\n\t);\n\tt.is(actual.name, './conventional-changelog-custom');\n\tt.deepEqual(actual.parserOpts, {\n\t\theaderPattern: /^(\\w*)(?:\\((.*)\\))?-(.*)$/\n\t});\n});\n\ntest('invalid extend should throw', async t => {\n\tconst cwd = await git.bootstrap('fixtures/extends-invalid');\n\tawait t.throws(load({}, {cwd}));\n});\n\ntest('empty file should have no rules', async t => {\n\tconst cwd = await git.bootstrap('fixtures/empty-object-file');\n\tconst actual = await load({}, {cwd});\n\tt.deepEqual(actual.rules, {});\n});\n\ntest('empty file should extend nothing', async t => {\n\tconst cwd = await git.bootstrap('fixtures/empty-file');\n\tconst actual = await load({}, {cwd});\n\tt.deepEqual(actual.extends, []);\n});\n\ntest('respects cwd option', async t => {\n\tconst cwd = await git.bootstrap('fixtures/recursive-extends/first-extended');\n\tconst actual = await load({}, {cwd});\n\tt.deepEqual(actual, {\n\t\tformatter: '@commitlint/format',\n\t\textends: ['./second-extended'],\n\t\tplugins: {},\n\t\trules: {\n\t\t\tone: 1,\n\t\t\ttwo: 2\n\t\t}\n\t});\n});\n\ntest('recursive extends', async t => {\n\tconst cwd = await git.bootstrap('fixtures/recursive-extends');\n\tconst actual = await load({}, {cwd});\n\tt.deepEqual(actual, {\n\t\tformatter: '@commitlint/format',\n\t\textends: ['./first-extended'],\n\t\tplugins: {},\n\t\trules: {\n\t\t\tzero: 0,\n\t\t\tone: 1,\n\t\t\ttwo: 2\n\t\t}\n\t});\n});\n\ntest('recursive extends with json file', async t => {\n\tconst cwd = await git.bootstrap('fixtures/recursive-extends-json');\n\tconst actual = await load({}, {cwd});\n\n\tt.deepEqual(actual, {\n\t\tformatter: '@commitlint/format',\n\t\textends: ['./first-extended'],\n\t\tplugins: {},\n\t\trules: {\n\t\t\tzero: 0,\n\t\t\tone: 1,\n\t\t\ttwo: 2\n\t\t}\n\t});\n});\n\ntest('recursive extends with yaml file', async t => {\n\tconst cwd = await git.bootstrap('fixtures/recursive-extends-yaml');\n\tconst actual = await load({}, {cwd});\n\n\tt.deepEqual(actual, {\n\t\tformatter: '@commitlint/format',\n\t\textends: ['./first-extended'],\n\t\tplugins: {},\n\t\trules: {\n\t\t\tzero: 0,\n\t\t\tone: 1,\n\t\t\ttwo: 2\n\t\t}\n\t});\n});\n\ntest('recursive extends with js file', async t => {\n\tconst cwd = await git.bootstrap('fixtures/recursive-extends-js');\n\tconst actual = await load({}, {cwd});\n\n\tt.deepEqual(actual, {\n\t\tformatter: '@commitlint/format',\n\t\textends: ['./first-extended'],\n\t\tplugins: {},\n\t\trules: {\n\t\t\tzero: 0,\n\t\t\tone: 1,\n\t\t\ttwo: 2\n\t\t}\n\t});\n});\n\ntest('recursive extends with package.json file', async t => {\n\tconst cwd = await git.bootstrap('fixtures/recursive-extends-package');\n\tconst actual = await load({}, {cwd});\n\n\tt.deepEqual(actual, {\n\t\tformatter: '@commitlint/format',\n\t\textends: ['./first-extended'],\n\t\tplugins: {},\n\t\trules: {\n\t\t\tzero: 0,\n\t\t\tone: 1,\n\t\t\ttwo: 2\n\t\t}\n\t});\n});\n\ntest('parser preset overwrites completely instead of merging', async t => {\n\tconst cwd = await git.bootstrap('fixtures/parser-preset-override');\n\tconst actual = await load({}, {cwd});\n\tt.is(actual.parserPreset.name, './custom');\n\tt.deepEqual(actual.parserPreset.parserOpts, {\n\t\theaderPattern: /.*/\n\t});\n});\n\ntest('recursive extends with parserPreset', async t => {\n\tconst cwd = await git.bootstrap('fixtures/recursive-parser-preset');\n\tconst actual = await load({}, {cwd});\n\tt.is(actual.parserPreset.name, './conventional-changelog-custom');\n\tt.is(typeof actual.parserPreset.parserOpts, 'object');\n\tt.deepEqual(\n\t\tactual.parserPreset.parserOpts.headerPattern,\n\t\t/^(\\w*)(?:\\((.*)\\))?-(.*)$/\n\t);\n});\n\ntest('ignores unknow keys', async t => {\n\tconst cwd = await git.bootstrap('fixtures/trash-file');\n\tconst actual = await load({}, {cwd});\n\n\tt.deepEqual(actual, {\n\t\tformatter: '@commitlint/format',\n\t\textends: [],\n\t\tplugins: {},\n\t\trules: {\n\t\t\tfoo: 'bar',\n\t\t\tbaz: 'bar'\n\t\t}\n\t});\n});\n\ntest('ignores unknow keys recursively', async t => {\n\tconst cwd = await git.bootstrap('fixtures/trash-extend');\n\tconst actual = await load({}, {cwd});\n\n\tt.deepEqual(actual, {\n\t\tformatter: '@commitlint/format',\n\t\textends: ['./one'],\n\t\tplugins: {},\n\t\trules: {\n\t\t\tzero: 0,\n\t\t\tone: 1\n\t\t}\n\t});\n});\n\ntest('find up from given cwd', async t => {\n\tconst outer = await fix.bootstrap('fixtures/outer-scope');\n\tawait git.init(path.join(outer, 'inner-scope'));\n\tconst cwd = path.join(outer, 'inner-scope', 'child-scope');\n\n\tconst actual = await load({}, {cwd});\n\n\tt.deepEqual(actual, {\n\t\tformatter: '@commitlint/format',\n\t\textends: [],\n\t\tplugins: {},\n\t\trules: {\n\t\t\tchild: true,\n\t\t\tinner: false,\n\t\t\touter: false\n\t\t}\n\t});\n});\n\ntest('find up config from outside current git repo', async t => {\n\tconst outer = await fix.bootstrap('fixtures/outer-scope');\n\tconst cwd = await git.init(path.join(outer, 'inner-scope'));\n\tconst actual = await load({}, {cwd});\n\n\tt.deepEqual(actual, {\n\t\tformatter: '@commitlint/format',\n\t\textends: [],\n\t\tplugins: {},\n\t\trules: {\n\t\t\tchild: false,\n\t\t\tinner: false,\n\t\t\touter: true\n\t\t}\n\t});\n});\n\ntest('respects formatter option', async t => {\n\tconst cwd = await git.bootstrap('fixtures/formatter');\n\tconst actual = await load({}, {cwd});\n\n\tt.deepEqual(actual, {\n\t\tformatter: 'commitlint-junit',\n\t\textends: [],\n\t\tplugins: {},\n\t\trules: {}\n\t});\n});\n\ntest('resolves formatter relative from config directory', async t => {\n\tconst cwd = await git.bootstrap('fixtures/formatter-local-module');\n\tconst actual = await load({}, {cwd});\n\n\tt.deepEqual(actual, {\n\t\tformatter: resolveFrom(cwd, './formatters/custom.js'),\n\t\textends: [],\n\t\tplugins: {},\n\t\trules: {}\n\t});\n});\n\ntest('returns formatter name when unable to resolve from config directory', async t => {\n\tconst cwd = await git.bootstrap('fixtures/formatter-local-module');\n\tconst actual = await load({formatter: './doesnt/exists.js'}, {cwd});\n\n\tt.deepEqual(actual, {\n\t\tformatter: './doesnt/exists.js',\n\t\textends: [],\n\t\tplugins: {},\n\t\trules: {}\n\t});\n});\n\ntest('does not mutate config module reference', async t => {\n\tconst file = 'config/commitlint.config.js';\n\tconst cwd = await git.bootstrap('fixtures/specify-config-file');\n\n\tconst configPath = path.join(cwd, file);\n\tconst before = JSON.stringify(require(configPath));\n\tawait load({arbitraryField: true}, {cwd, file});\n\tconst after = JSON.stringify(require(configPath));\n\n\tt.is(before, after);\n});\n\ntest('resolves parser preset from conventional commits', async t => {\n\tconst cwd = await npm.bootstrap('fixtures/parser-preset-conventionalcommits');\n\tconst actual = await load({}, {cwd});\n\n\tt.is(actual.parserPreset.name, 'conventional-changelog-conventionalcommits');\n\tt.is(typeof actual.parserPreset.parserOpts, 'object');\n\tt.deepEqual(\n\t\tactual.parserPreset.parserOpts.headerPattern,\n\t\t/^(\\w*)(?:\\((.*)\\))?!?: (.*)$/\n\t);\n});\n\ntest('resolves parser preset from conventional angular', async t => {\n\tconst cwd = await npm.bootstrap('fixtures/parser-preset-angular');\n\tconst actual = await load({}, {cwd});\n\n\tt.is(actual.parserPreset.name, 'conventional-changelog-angular');\n\tt.is(typeof actual.parserPreset.parserOpts, 'object');\n\tt.deepEqual(\n\t\tactual.parserPreset.parserOpts.headerPattern,\n\t\t/^(\\w*)(?:\\((.*)\\))?: (.*)$/\n\t);\n});\n\ntest('recursive resolves parser preset from conventional atom', async t => {\n\tconst cwd = await git.bootstrap(\n\t\t'fixtures/recursive-parser-preset-conventional-atom'\n\t);\n\t// the package file is nested in 2 folders, `npm.bootstrap` cant do that\n\tawait execa('npm', ['install'], {\n\t\tcwd: path.resolve(cwd, 'first-extended', 'second-extended')\n\t});\n\n\tconst actual = await load({}, {cwd});\n\n\tt.is(actual.parserPreset.name, 'conventional-changelog-atom');\n\tt.is(typeof actual.parserPreset.parserOpts, 'object');\n\tt.deepEqual(actual.parserPreset.parserOpts.headerPattern, /^(:.*?:) (.*)$/);\n});\n\ntest('resolves parser preset from conventional commits without factory support', async t => {\n\tconst cwd = await npm.bootstrap(\n\t\t'fixtures/parser-preset-conventional-without-factory'\n\t);\n\tconst actual = await load({}, {cwd});\n\n\tt.is(actual.parserPreset.name, 'conventional-changelog-conventionalcommits');\n\tt.is(typeof actual.parserPreset.parserOpts, 'object');\n\tt.deepEqual(\n\t\tactual.parserPreset.parserOpts.headerPattern,\n\t\t/^(\\w*)(?:\\((.*)\\))?!?: (.*)$/\n\t);\n});\n"]}